






























































































[{"body":"題目  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\n  You may assume that each input would have exactly one solution, and you may not use the same element twice.\n  You can return the answer in any order.\n 傳入 數字列表 及 最後答案加總數值，回傳 最後答案加總數值 是 數字列表 的第幾個跟第幾個數字的加總\n答案 from typing import List class Solution: def twoSum(self, nums_list: List[int], final_sum_value: int) -\u003e List[int]: # 數字反向對應表 num_reverse_mapping = {} # 列舉數字清單 enumerate_nums_list = enumerate(nums_list) for current_num_key, current_num_value in enumerate_nums_list: # 其他鍵值數值 other_value = final_sum_value - current_num_value # 數值是否存在反轉對應表 is_other_value_exist = (other_value in num_reverse_mapping) if is_other_value_exist: # 若其他數值有存在反轉表，回傳 key 值 other_num_key = num_reverse_mapping[other_value] return [other_num_key, current_num_key] # 沒有找到數值，將數值位置 key 記錄下來 num_reverse_mapping[current_num_value] = current_num_key if __name__ == '__main__': # begin s = Solution() print(s.twoSum([3, 2, 4], 6)) print(s.twoSum([3, 2, 4], 7)) 參考資料  Two Sum - LeetCode 0001. Two Sum | LeetCode Cookbook  ","categories":["Python","教學文件","新手教學","Leetcode","問題","0001 - Two Sum"],"description":"Python Leetcode 問題: 0001 - Two Sum","excerpt":"Python Leetcode 問題: 0001 - Two Sum","ref":"/leetcode/question/0001-0100/0001-two-sum/","tags":["Python","教學文件","新手教學","Leetcode","問題","0001 - Two Sum"],"title":"0001 - Two Sum"},{"body":"題目  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n  You may assume the two numbers do not contain any leading zero, except the number 0 itself.\n 傳入 數字列表 及 最後答案加總數值，回傳 最後答案加總數值 是 數字列表 的第幾個跟第幾個數字的加總\n答案 from typing import List class ListNode(object): def __init__(self, x): self.val = x self.next = None class Solution: @staticmethod # ListNode 轉換成數字清單 def listNodeToNumList(HeadListNode: ListNode) -\u003e List[int]: # 數字清單 num_list = [] while HeadListNode is not None: num_list.append(HeadListNode.val) HeadListNode = HeadListNode.next return num_list @staticmethod # 數字清單轉換成 ListNode def numListToListNode(nums_list: List[int]) -\u003e ListNode: # 初始化鏈結節點 HeadListNode = ListNode(None) # 設定目前鏈結節點 CurrentListNode = HeadListNode for value in nums_list: # 設定鏈結節點的下一節點 CurrentListNode.next = ListNode(value) # 將下一節點設為目前節點 CurrentListNode = CurrentListNode.next return HeadListNode.next def addTwoNumbers(self, FirstNumberListNode: ListNode, SecondNumberListNode: ListNode) -\u003e ListNode: # 建立答案節點，預設個位數是 0 AnswerListNode = ListNode(0) CurrentAnswerListNode = AnswerListNode # 目前答案節點 number_1: int = 0 # 第 1 個加總數值 number_2: int = 0 # 第 2 個加總數值 carry_number: int = 0 # 加總後的進位數值 number_sum: int = 0 # 加總數值 while FirstNumberListNode is not None or SecondNumberListNode is not None or carry_number != 0: # === 計算第 1 個數字 === if FirstNumberListNode is None: # 若「第 1 數字節點」為 nil，表示沒有數字可以做加總了，設定可加總數字為 0 number_1 = 0 else: # 若「第 1 數字節點」有值，將節點數值設定為此次第 1 個加總數值 number_1 = FirstNumberListNode.val FirstNumberListNode = FirstNumberListNode.next # === 計算第 2 個數字 === if SecondNumberListNode is None: # 若「第 2 數字節點」為 nil，表示沒有數字可以做加總了，設定可加總數字為 0 number_2 = 0 else: number_2 = SecondNumberListNode.val SecondNumberListNode = SecondNumberListNode.next # 加總數值 number_sum = number_1 + number_2 + carry_number # 設定餘數為目前答案節點數值 CurrentAnswerListNode.next = ListNode(number_sum % 10) # 設定答案節點的下一節點為目前節點，繼續往後做加總 CurrentAnswerListNode = CurrentAnswerListNode.next # 取得加總後的進位數值，繼續往後做加總 carry_number = int(number_sum / 10) return AnswerListNode.next if __name__ == '__main__': # begin s = Solution() print(s.listNodeToNumList(s.addTwoNumbers(s.numListToListNode([2, 4, 3]), s.numListToListNode([5, 6, 4])))) print(s.listNodeToNumList( s.addTwoNumbers(s.numListToListNode([9, 9, 9, 9, 9, 9, 9]), s.numListToListNode([9, 9, 9, 9])))) ","categories":["Python","教學文件","新手教學","Leetcode","問題","0002 - Add Two Number"],"description":"Python Leetcode 問題: 0002 - Add Two Number","excerpt":"Python Leetcode 問題: 0002 - Add Two Number","ref":"/leetcode/question/0001-0100/0002-add-two-number/","tags":["Python","教學文件","新手教學","Leetcode","問題","0002 - Add Two Number"],"title":"0002 - Add Two Number"},{"body":"題目  Given a string s, find the length of the longest substring without repeating characters.\n 傳入 字串變數 ，找出 最長的子字串字元 長度\n答案 class Solution: def lengthOfLongestSubstring(self, check_text: str) -\u003e int: # 被檢查的文字長度 check_text_length = len(check_text) # 驗證字串長度為 0 不檢查 if check_text_length == 0: return 0 # 建立長度 256 的整數字典 text_ascii_int_flag = {} # 左方字元索引 left_character_index: int = 0 # 右方字元索引 right_character_index: int = 0 # 檢查文字最大不重複字串長度 check_text_longest_string_length: int = 0 # 右方指標字元 ASCII Code right_character_ascii_code: int = 0 # 左方指標字元 ASCII Code left_character_ascii_code: int = 0 # 目前字串長度 current_text_string_length: int = 0 while left_character_index \u003c= check_text_length: # 若左側指標小於字串長度，繼續檢查 if right_character_index \u003e= check_text_length: # 若右側指標大於字串長度，表示已經檢查到最後的字串了，不需要再檢查 break # 右方指標字元 ASCII Code right_character_ascii_code = ord(check_text[right_character_index]) if right_character_ascii_code not in text_ascii_int_flag: # 「右側指標 + 1 小於字串長度，表示字串還沒全部檢查完」且「此文字未出現過」 # 標記右方文字出現過 text_ascii_int_flag[right_character_ascii_code] = 1 # 繼續往右檢查 right_character_index += 1 else: # 左方指標字元 ASCII Code left_character_ascii_code = ord(check_text[left_character_index]) # 刪除標記左方文字沒出現過 del text_ascii_int_flag[left_character_ascii_code] # 將左方指標往前移動 left_character_index += 1 # 設定目前字串長度 current_text_string_length = right_character_index - left_character_index if check_text_longest_string_length \u003c current_text_string_length: # 若右方指標在左方指標前面，且長度大於目前檢查文字的最大長度，將目前長度設定為最大長度 check_text_longest_string_length = current_text_string_length if left_character_index + check_text_longest_string_length \u003e= check_text_length or right_character_index \u003e= check_text_length: # 1. 左方字元索引 + 目前檢查文字的最大長度 \u003e 文字最大長度：再往右找也找不到更長的文字了 # 2. 右方字元索引 \u003e= 被檢查的文字長度: 已經檢查到最後一個字元了 # 跳出檢查 break return check_text_longest_string_length if __name__ == '__main__': # begin s = Solution() print(s.lengthOfLongestSubstring('abcabcbb')) print(s.lengthOfLongestSubstring('bbbbb')) ","categories":["Python","教學文件","新手教學","Leetcode","問題","0003 - Longest Substring Without Repeating Characters"],"description":"Python Leetcode 問題: 0003 - Longest Substring Without Repeating Characters","excerpt":"Python Leetcode 問題: 0003 - Longest Substring Without Repeating Characters","ref":"/leetcode/question/0001-0100/0003-longest-substring-without-repeating-characters/","tags":["Python","教學文件","新手教學","Leetcode","問題","0003 - Longest Substring Without Repeating Characters"],"title":"0003 - Longest Substring Without Repeating Characters"},{"body":"題目  Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\n  The overall run time complexity should be O(log (m+n)).\n 傳入 2 個已排序數字陣列，回傳兩個排序陣列的中位數，複雜度必須為 O(log (m+n)).\n演算法原理 Binary Search : Median of two sorted arrays of different sizes   答案 import sys from typing import List class Solution(object): def findMedianSortedArrays(self, nums_list_1: List[int], nums_list_2: List[int]) -\u003e float: # https://github.com/mission-peace/interview/blob/master/src/com/interview/binarysearch/MedianOfTwoSortedArrayOfDifferentLength.java # https://discuss.leetcode.com/topic/4996/share-my-o-log-min-m-n-solution-with-explanation # https://discuss.leetcode.com/topic/16797/very-concise-o-log-min-m-n-iterative-solution-with-detailed-explanation # https://books.halfrost.com/leetcode/ChapterFour/0001~0099/0004.Median-of-Two-Sorted-Arrays/ # 「數字清單 1」數量 nums_list_1_length = len(nums_list_1) # 「數字清單 2」數量 nums_list_2_length = len(nums_list_2) if nums_list_1_length \u003e nums_list_2_length: # 若「數字清單 1」數量大於「數字清單 2」，將交換數字清單順序，將小的優先傳入 return self.findMedianSortedArrays(nums_list_2, nums_list_1) # 「數字清單 1」左側檢查位置（從第一個開始往右檢查） nums_list_1_left_index = 0 # 「數字清單 1」右側檢查位置（從最後一個開始往左檢查） nums_list_1_right_index = nums_list_1_length # 所有數字中位數可能位置，全部長度+1，bit 往右位移除 2 all_nums_list_divide_position = (nums_list_1_length + nums_list_2_length + 1) \u003e\u003e 1 # 「數字清單 1」中位數位置 nums_list_1_median_partition_index = 0 # 「數字清單 2」中位數位置 nums_list_2_median_partition_index = 0 # 找尋中位數位置 while nums_list_1_left_index \u003c= nums_list_1_right_index: # 「數字清單 1」左側檢查位置小於右側位置，繼續檢查 # 「數字清單 1」中位數檢查拆分位置 = 目前左方最小數字位置 + 右方剩餘數字取中位數 bit 往右位移除 2 nums_list_1_median_partition_index: int = nums_list_1_left_index + ( (nums_list_1_right_index - nums_list_1_left_index) \u003e\u003e 1) # 「數字清單 2」中位數檢查拆分位置 = 所有數字中位數可能位置 - 數字清單 1 中位數位置 nums_list_2_median_partition_index: int = all_nums_list_divide_position - nums_list_1_median_partition_index if nums_list_1_median_partition_index \u003e 0 and nums_list_1[nums_list_1_median_partition_index - 1] \u003e \\ nums_list_2[nums_list_2_median_partition_index]: # 「數字清單 1」中位數位置不是第一個數字，且有資料 # 「數字清單 1」中位數左側數字比「數字清單 2」右側中位數還大（排序過的數字左側應比右側小） # 表示整個數字列表的中位數在「數字清單 1」目前中位數之前 # 「數字清單 1」右方數字索引往左側移動，找「數字清單 1」中位數前面小一點的數字 nums_list_1_right_index = nums_list_1_median_partition_index - 1 elif nums_list_1_median_partition_index != nums_list_1_length and nums_list_1[ nums_list_1_median_partition_index] \u003c nums_list_2[nums_list_2_median_partition_index - 1]: # 「數字清單 1」中位數位置不是最後一個數字，且有資料 # 「數字清單 1」中位數右側數字比「數字清單 2」左側中位數還小（排序過的數字右側應比左側大） # 「數字清單 1」中位數位置數字 比 「數字清單 2」中位數位位置的前一個數字還小 # 「數字清單 1」左方數字索引往右側移動，找「數字清單 1」中位數後面大一點的數字 nums_list_1_left_index = nums_list_1_median_partition_index + 1 else: # 無法再劃分左右側中位數位置 break # === 找出中位數 === # 中位數 median_num: float = 0.0 # 左側中位數 median_num_left: int = 0 # 右側中位數 median_num_right: int = 0 if nums_list_1_median_partition_index == 0: # 「數字清單 1」中位數位置為移動到第一個數字，或是沒有數字 =\u003e 「數字清單 1」左側都沒有資料 # 中位數左側數字 = 「數字清單 2」 左側第一個數字」 median_num_left = nums_list_2[nums_list_2_median_partition_index - 1] elif nums_list_2_median_partition_index == 0: # 「數字清單 2」中位數位置移動到第一個數字，表示數字只有一個，或是沒有數字 =\u003e 「數字清單 2」左側都沒有資料 # 中位數左側數字 = 「數字清單 1」 左側第一個數字」 median_num_left = nums_list_1[nums_list_1_median_partition_index - 1] else: # 「數字清單 1」與「數字清單 2」有超過一個數字，有自己的中位數，取兩個左側中位數最大的那一個 # 左側的數字比右側小，所以要找比較大的數字才會接近右側數字 median_num_left = max(nums_list_1[nums_list_1_median_partition_index - 1], nums_list_2[nums_list_2_median_partition_index - 1]) if (nums_list_1_length + nums_list_2_length) \u0026 1 == 1: # 若數字總數量為奇數，直接回傳中位數數字 median_num = float(median_num_left) return median_num # 若數字總數量為偶數，取得中位數右側最小數值 if nums_list_1_median_partition_index == nums_list_1_length: # 「數字清單 1」沒有數字，或者索引超出範圍 =\u003e 「數字清單 1」右側都沒有資料，使用「數字清單 2」右側資料 median_num_right = nums_list_2[nums_list_2_median_partition_index] elif nums_list_2_median_partition_index == nums_list_2_length: # 「數字清單 2」沒有數字，或者索引超出範圍 =\u003e 「數字清單 2」右側都沒有資料，使用「數字清單 1」右側資料 median_num_right = nums_list_1[nums_list_1_median_partition_index] else: # 「數字清單 1」與「數字清單 2」有超過一個數字，有自己的中位數，取兩個右側中位數最小的那一個 median_num_right = min(nums_list_1[nums_list_1_median_partition_index], nums_list_2[nums_list_2_median_partition_index]) # 計算中位數左右平均 median_num = float((median_num_left + median_num_right) / 2.0) return median_num if __name__ == '__main__': # begin s = Solution() print(s.findMedianSortedArrays([1], [2, 3, 4, 5, 6])) print(s.findMedianSortedArrays([4], [1, 2, 3, 5, 6])) print(s.findMedianSortedArrays([], [1, 2, 3, 5, 6])) 參考資料  Binary Search : Median of two sorted arrays of different sizes. - YouTube Median of Two Sorted Arrays - LeetCode Share my O(log(min(m,n))) solution with explanation - LeetCode Discuss leetcode/004_Median_of_Two_Sorted_Arrays.py at master · qiyuangong/leetcode · GitHub  ","categories":["Python","教學文件","新手教學","Leetcode","問題","0004 - Median of Two Sorted Arrays"],"description":"Python Leetcode 問題: 0004 - Median of Two Sorted Arrays","excerpt":"Python Leetcode 問題: 0004 - Median of Two Sorted Arrays","ref":"/leetcode/question/0001-0100/0004-median-of-two-sorted-arrays/","tags":["Python","教學文件","新手教學","Leetcode","問題","0004 - Median of Two Sorted Arrays"],"title":"0004 - Median of Two Sorted Arrays"},{"body":"題目  Given a string s, return the longest palindromic substring in s.\n 回傳最長的對稱字串\nexample 1\n Input: s = “babad” Output: “bab” Note: “aba” is also a valid answer.\n example 2\n Input: s = “cbbd” Output: “bb”\n 演算法原理 Longest palindromic substring | Dynamic programming   LeetCode 5. Longest Palindromic Substring (Algorithm Explained)   答案 class Solution: def longestPalindrome(self, check_text: str) -\u003e str: # 字串長度 check_text_length = len(check_text) # 文字不重複字串 check_text_set = set(check_text) if check_text_length \u003c= 1 or len(check_text_set) == 1: # 若字串長度小於 1，或者字串為重複字串，直接將字串回傳 return check_text # manacher 檢查字串，將字串加入 # 符號，強制將字串變為奇數長度字串 # baba =\u003e b#a#b#a # babad =\u003e b#a#b#a#d manacher_check_text = '#'.join(check_text) # manacher 檢查字串長度 manacher_check_text_length = len(manacher_check_text) manacher_check_text_range = range(1, manacher_check_text_length) # 對稱字串長度對應表 palindrome_length_mapping_table = [0] * manacher_check_text_length # 最長對稱文字檢查長度 max_check_text_length: int = int(manacher_check_text_length / 2) + 1 for check_text_length in range(1, max_check_text_length): # 設定下一個檢查的文字範圍 manacher_next_check_text_range = [] for check_text_position in manacher_check_text_range: # 檢查文字位置 # 檢查文字位置，前一個檢查文字長度位置 check_text_previous_text_position = check_text_position - check_text_length # 檢查文字位置，後一個檢查文字長度位置 check_text_next_text_position = check_text_position + check_text_length if check_text_previous_text_position \u003c 0 or check_text_next_text_position \u003e= manacher_check_text_length: # 若字串索引超過字串長度，不檢查 continue if manacher_check_text[check_text_previous_text_position] != manacher_check_text[ check_text_next_text_position]: # 若字串前後不相等，繼續檢查下一個 continue # 字串相等，將此位置紀錄，下個回合繼續做檢查 manacher_next_check_text_range.append(check_text_position) if manacher_check_text[check_text_previous_text_position] == '#': # 若為 manacher 字串符號，跳過不紀錄 continue # 紀錄非 # 字串，文字重複字串位置的長度 palindrome_length_mapping_table[check_text_position] = check_text_length # 設定下一個字串檢查範圍，僅需檢查目前有重複出現字串位置即可 manacher_check_text_range = manacher_next_check_text_range # 最長文字長度出現位置 max_text_length_position = 0 # 最長文字長度 max_text_length = 0 for text_position, text_length in enumerate(palindrome_length_mapping_table): if text_length \u003e max_text_length: # 若文字長度大於最大文字長度，設定此位置及長度為最長長度 max_text_length = text_length max_text_length_position = text_position # 取出最長對稱字串，並去除特殊標記「#」 longest_palindrome_check_text = manacher_check_text[ max_text_length_position - max_text_length:max_text_length_position + max_text_length + 1].replace( '#', '') return longest_palindrome_check_text if __name__ == '__main__': # begin s = Solution() print(s.longestPalindrome('babad')) 參考資料  Longest palindromic substring | Dynamic programming - YouTube LeetCode 5. Longest Palindromic Substring (Algorithm Explained) - YouTube 0005. Longest Palindromic Substring | LeetCode Cookbook leetcode/005_Longest_Palindromic_Substring.py at master · qiyuangong/leetcode · GitHub  ","categories":["Python","教學文件","新手教學","Leetcode","問題","0005 - Longest Palindromic Substring"],"description":"Python Leetcode 問題: 0005 - Longest Palindromic Substring","excerpt":"Python Leetcode 問題: 0005 - Longest Palindromic Substring","ref":"/leetcode/question/0001-0100/0005-longest-palindromic-substring/","tags":["Python","教學文件","新手教學","Leetcode","問題","0005 - Longest Palindromic Substring"],"title":"0005 - Longest Palindromic Substring"},{"body":"列印遞增數字 for i in range(10): print(i, end=\", \") # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, for i in range(0, 10): print(i, end=\", \") # 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 列印遞增數字，間隔 2 for i in range(0, 10, 2): print(i, end=\", \") 0, 2, 4, 6, 8, 雙重迴圈 for i in range(0, 10): for j in range(0, 10): if j == 9: # 換行 print(i, j) else: print(i, j, end=\" | \") # 0 0 | 0 1 | 0 2 | 0 3 | 0 4 | 0 5 | 0 6 | 0 7 | 0 8 | 0 9 # 1 0 | 1 1 | 1 2 | 1 3 | 1 4 | 1 5 | 1 6 | 1 7 | 1 8 | 1 9 # 2 0 | 2 1 | 2 2 | 2 3 | 2 4 | 2 5 | 2 6 | 2 7 | 2 8 | 2 9 # 3 0 | 3 1 | 3 2 | 3 3 | 3 4 | 3 5 | 3 6 | 3 7 | 3 8 | 3 9 # 4 0 | 4 1 | 4 2 | 4 3 | 4 4 | 4 5 | 4 6 | 4 7 | 4 8 | 4 9 # 5 0 | 5 1 | 5 2 | 5 3 | 5 4 | 5 5 | 5 6 | 5 7 | 5 8 | 5 9 # 6 0 | 6 1 | 6 2 | 6 3 | 6 4 | 6 5 | 6 6 | 6 7 | 6 8 | 6 9 # 7 0 | 7 1 | 7 2 | 7 3 | 7 4 | 7 5 | 7 6 | 7 7 | 7 8 | 7 9 # 8 0 | 8 1 | 8 2 | 8 3 | 8 4 | 8 5 | 8 6 | 8 7 | 8 8 | 8 9 # 9 0 | 9 1 | 9 2 | 9 3 | 9 4 | 9 5 | 9 6 | 9 7 | 9 8 | 9 9 跳出迴圈 for i in range(0, 10): if i == 4: # i = 4 不處理 continue elif i == 6: # i = 6 中斷迴圈 break for j in range(0, 10): if j == 9: # 換行 print(i, j) else: print(i, j, end=\" | \") # 0 0 | 0 1 | 0 2 | 0 3 | 0 4 | 0 5 | 0 6 | 0 7 | 0 8 | 0 9 # 1 0 | 1 1 | 1 2 | 1 3 | 1 4 | 1 5 | 1 6 | 1 7 | 1 8 | 1 9 # 2 0 | 2 1 | 2 2 | 2 3 | 2 4 | 2 5 | 2 6 | 2 7 | 2 8 | 2 9 # 3 0 | 3 1 | 3 2 | 3 3 | 3 4 | 3 5 | 3 6 | 3 7 | 3 8 | 3 9 # 5 0 | 5 1 | 5 2 | 5 3 | 5 4 | 5 5 | 5 6 | 5 7 | 5 8 | 5 9 列印出串列（list）中的元素 element_list = [1, 2, 3] for element in element_list: print(element) # 1 # 2 # 3 user_list = ['KJ', 'Kay', 'Jay'] for user in user_list: print(user) # KJ # Kay # Jay 字串迴圈 name = \"Key Jay\" for name_character in name: print(name_character) # K # e # y # # J # a # y ","categories":["Python","教學文件","新手教學","基礎","for 迴圈"],"description":"Python 基礎: for 迴圈","excerpt":"Python 基礎: for 迴圈","ref":"/basic/loop/for/","tags":["Python","教學文件","新手教學","基礎","for 迴圈"],"title":"for"},{"body":"i = 1 while i \u003c= 10: print(i, end=\" \") i = i + 1 # 1 2 3 4 5 6 7 8 9 10 ","categories":["Python","教學文件","新手教學","基礎","while 迴圈"],"description":"Python 基礎: while 迴圈","excerpt":"Python 基礎: while 迴圈","ref":"/basic/loop/while/","tags":["Python","教學文件","新手教學","基礎","while 迴圈"],"title":"while"},{"body":"","categories":["Python","教學文件","新手教學","Leetcode","問題"],"description":"Python Leetcode 問題: 0001~0100","excerpt":"Python Leetcode 問題: 0001~0100","ref":"/leetcode/question/0001-0100/","tags":["Python","教學文件","新手教學","Leetcode","問題"],"title":"0001~0100"},{"body":"set 函式  class set([iterable])\n    運算 公式 說明     交集 \u0026 x \u0026 y 找出 x 和 y 中的 相同元素   聯集 | x | y 找出 x 和 y 中的 所有元素   差集 - x - y 找出在 x 中，但不在 y 中的元素（只有 x 有的元素）   補集 ^ x ^ y 找出 x 和 y 中的 不同元素    set 字串 sport_1 = 'basketball' sport_2 = 'baseball' sport_1_set = set(sport_1) sport_2_set = set(sport_2) print('sport_1_set: ', sport_1_set) print('sport_2_set: ', sport_2_set) # sport_1_set: {'a', 'k', 't', 'e', 'l', 'b', 's'} # sport_2_set: {'b', 'a', 'l', 'e', 's'} # 交集 sport_1_2_set_intersection = sport_1_set \u0026 sport_2_set print('sport_1_2_set_intersection: ', sport_1_2_set_intersection) # sport_1_2_set_intersection: {'a', 'e', 'l', 'b', 's'} # 聯集 sport_1_2_set_union = sport_1_set | sport_2_set print('sport_1_2_set_union: ', sport_1_2_set_union) # sport_1_2_set_union: {'a', 'k', 't', 'e', 'l', 'b', 's'} # 差集 sport_1_2_set_subtraction = sport_1_set - sport_2_set print('sport_1_2_set_subtraction: ', sport_1_2_set_subtraction) # sport_1_2_set_subtraction: {'k', 't'} sport_2_1_set_subtraction = sport_2_set - sport_1_set print('sport_2_1_set_subtraction: ', sport_2_1_set_subtraction) # sport_2_1_set_subtraction: set() # 補集 sport_1_2_set_complement = sport_1_set ^ sport_2_set print('sport_1_2_set_complement: ', sport_1_2_set_complement) # sport_1_2_set_complement: {'k', 't'} set dict 字典 user_dict_1 = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } user_dict_2 = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"age\": 18 } user_dict_1_set = set(user_dict_1) user_dict_2_set = set(user_dict_2) print('user_dict_1_set: ', user_dict_1_set) print('user_dict_2_set: ', user_dict_2_set) # user_dict_1_set: {'home', 'job', 'name'} # user_dict_2_set: {'home', 'age', 'name'} # 交集 user_dict_1_2_set_intersection = user_dict_1_set \u0026 user_dict_2_set print('user_dict_1_2_set_intersection: ', user_dict_1_2_set_intersection) # user_dict_1_2_set_intersection: {'home', 'name'} # 聯集 user_dict_1_2_set_union = user_dict_1_set | user_dict_2_set print('user_dict_1_2_set_union: ', user_dict_1_2_set_union) # user_dict_1_2_set_union: {'name', 'home', 'job', 'age'} # 差集 user_dict_1_2_set_subtraction = user_dict_1_set - user_dict_2_set print('user_dict_1_2_set_subtraction: ', user_dict_1_2_set_subtraction) # user_dict_1_2_set_subtraction: {'job'} user_dict_2_1_set_subtraction = user_dict_2_set - user_dict_1_set print('user_dict_2_1_set_subtraction: ', user_dict_2_1_set_subtraction) # user_dict_2_1_set_subtraction: {'age'} # 補集 user_dict_1_2_set_complement = user_dict_1_set ^ user_dict_2_set print('user_dict_1_2_set_complement: ', user_dict_1_2_set_complement) 參考資料  Python set() 函数 | 菜鸟教程  ","categories":["Python","教學文件","新手教學","基礎","set 函數"],"description":"Python 基礎: set 函數，建立一個無順序不重複的元素資料集，可以計算資料集的交集、差集跟合集","excerpt":"Python 基礎: set 函數，建立一個無順序不重複的元素資料集，可以計算資料集的交集、差集跟合集","ref":"/basic/function/set/","tags":["Python","教學文件","新手教學","基礎","set 函數"],"title":"set 函數"},{"body":"","categories":["Python","教學文件","新手教學","基礎","變數類型"],"description":"Python 基礎: 變數類型","excerpt":"Python 基礎: 變數類型","ref":"/basic/data-type/","tags":["Python","教學文件","新手教學","基礎","變數類型"],"title":"變數類型"},{"body":"","categories":["Python","教學文件","新手教學","基礎"],"description":"Python 基礎","excerpt":"Python 基礎","ref":"/basic/","tags":["Python","教學文件","新手教學","基礎"],"title":"基礎"},{"body":"一般 dict user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } print(\"user_dict: \", user_dict) print(\"user.name: \", user_dict['name']) print(\"user.home: \", user_dict['home']) print(\"user.job: \", user_dict['job']) # user_dict: {'name': 'KJ', 'home': 'Taiwan', 'job': 'Developer'} # user.name: KJ # user.home: Taiwan # user.job: Developer 變更 dict user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } user_dict['name'] = 'Kay' print('user_dict: ', user_dict) # user_dict: {'name': 'Kay', 'home': 'Taiwan', 'job': 'Developer'} in 鍵值是否存在 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } if 'name' in user_dict: print('key \"name\" exist') else: print('key \"name\" not exist') if 'age' in user_dict: print('key \"age\" exist') else: print('key \"age\" not exist') # key \"name\" exist # key \"age\" not exist not in 鍵值是否不存在 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } if 'name' not in user_dict: print('key \"name\" not exist') else: print('key \"name\" exist') if 'age' not in user_dict: print('key \"age\" not exist') else: print('key \"age\" exist') # key \"name\" exist # key \"age\" not exist del 刪除指定鍵值 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } print(\"user_dict: \", user_dict) del user_dict['job'] print(\"user_dict: \", user_dict) # user_dict: {'name': 'KJ', 'home': 'Taiwan', 'job': 'Developer'} # user_dict: {'name': 'KJ', 'home': 'Taiwan'} dict.clear() 刪除所有鍵值資料 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } print(\"user_dict: \", user_dict) user_dict.clear() print(\"user_dict: \", user_dict) # user_dict: {'name': 'KJ', 'home': 'Taiwan', 'job': 'Developer'} # user_dict: {} dict.values() 取得所有資料 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } user_dict_value = user_dict.values() print('user_dict_value:', user_dict_value) # user_dict_value: dict_values(['KJ', 'Taiwan', 'Developer']) user_dict.keys() 取得所有鍵值 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } user_dict_keys = user_dict.keys() print('user_dict_keys: ', user_dict_keys) # user_dict_keys: dict_keys(['name', 'home', 'job']) dict.items() 取得資料及鍵值項目資訊 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } user_dict_items = user_dict.items() print(user_dict_items) # dict_items([('name', 'KJ'), ('home', 'Taiwan'), ('job', 'Developer')]) for in 迴圈: 用 key 取值 for key in user_dict: print('key =\u003e value: ', key, user_dict[key]) # key =\u003e value: name KJ # key =\u003e value: home Taiwan # key =\u003e value: job Developer for in 迴圈: dict.values() 數值 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } for value in user_dict.values(): print('value: ', value) # value: KJ # value: Taiwan # value: Developer for in 迴圈: dict.values() 鍵值 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } for key in user_dict.keys(): print('key: ', key) # key: name # key: home # key: job for in 迴圈: dict.items() 資料 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } for key, value in user_dict.items(): print(\"key =\u003e value: \", key, value) # key =\u003e value: name KJ # key =\u003e value: home Taiwan # key =\u003e value: job Developer dict.copy() 複製字典 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } copy_user_dict = user_dict.copy() print('user_dict: ', user_dict) print('copy_user_dict: ', copy_user_dict) # user_dict: {'name': 'KJ', 'home': 'Taiwan', 'job': 'Developer'} # copy_user_dict: {'name': 'KJ', 'home': 'Taiwan', 'job': 'Developer'} 巢狀字典 user_dict = { \"developer1\": { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" }, \"developer2\": { \"name\": \"Kay\", \"home\": \"Taipei\", \"job\": \"Frontend\" }, \"developer3\": { \"name\": \"Jay\", \"home\": \"Taipei\", \"job\": \"Backend\" } } print('user_dict: ', user_dict) # user_dict: {'developer1': {'name': 'KJ', 'home': 'Taiwan', 'job': 'Developer'}, 'developer2': {'name': 'Kay', 'home': 'Taipei', 'job': 'Frontend'}, 'developer3': {'name': 'Jay', 'home': 'Taipei', 'job': 'Backend'}} 變更巢狀字典 user_dict = { \"developer1\": { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" }, \"developer2\": { \"name\": \"Kay\", \"home\": \"Taipei\", \"job\": \"Frontend\" }, \"developer3\": { \"name\": \"Jay\", \"home\": \"Taipei\", \"job\": \"Backend\" } } user_dict['developer3']['name'] = 'John' print('user_dict: ', user_dict) 參考資料  Python - Loop Dictionaries Python - Dictionary Methods [Day04]Python 基礎語法 - list、tuple、dict、for、while - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天  ","categories":["Python","教學文件","新手教學","基礎","dict 字典變數","key-value 變數"],"description":"Python 基礎: dict 字典 key-value 變數","excerpt":"Python 基礎: dict 字典 key-value 變數","ref":"/basic/data-type/dict/","tags":["Python","教學文件","新手教學","基礎","dict 字典變數","key-value 變數"],"title":"dict 字典 key-value 變數"},{"body":"一般 if 條件 a = 1 if a == 1: print('got a') else: print('oops!') 單行 if  \u003c條件成立的結果\u003e if \u003c條件\u003e else \u003c條件不成立的結果\u003e\n a = 1 home = 'Taiwan' if a == 1 else 'Taipei' print(home) else if 條件 a = 3 if a == 1: print('got a: 1') elif a == 3: print('got a: 3') else: print('oops!') ","categories":["Python","教學文件","新手教學","基礎","條件式","Condition","if"],"description":"Python 基礎: Condition 條件式 if ","excerpt":"Python 基礎: Condition 條件式 if ","ref":"/basic/condition/if/","tags":["Python","教學文件","新手教學","基礎","條件式","Condition","if"],"title":"if 條件式"},{"body":"一般 list 串列 list_1 = [1, 2, 3, 4, 5] print(\"list_1: \", list_1) print(\"list_1[3]: \", list_1[3]) # list: [1, 2, 3, 4, 5] # list[3]: 4 list_1 = [1, 'KJ', True] print(\"list_1: \", list_1) # list_1: [1, 'KJ', True] 最後一個元素 list_1 = [1, 2, 3, 4, 5] print(\"list_1: \", list_1) print(\"list_1[-1]: \", list_1[-1]) # list: [1, 2, 3, 4, 5] # list[-1]: 5 重複串列 list_1 = [1, 2, 3] list_2 = list_1 * 2 print(\"list_1: \", list_1) print(\"list_2: \", list_2) # list_1: [1, 2, 3] # list_2: [1, 2, 3, 1, 2, 3] 取得串列中間元素 list_1 = [1, 2, 3, 4, 5, 6, 7] list_2 = list_1[2:5] print(\"list_1: \", list_1) print(\"list_2: \", list_2) # list_1: [1, 2, 3, 4, 5, 6, 7] # list_2: [3, 4, 5] list_1 = [1, 2, 3, 4, 5] # 取出第一個元素 list_2 = list_1[:1] print(\"list_1: \", list_1) print(\"list_2: \", list_2) # list_1: [1, 2, 3, 4, 5] # list_2: [1] list_1 = [1, 2, 3, 4, 5] # 取出第一個元素後面的元素 list_2 = list_1[1:] print(\"list_1: \", list_1) print(\"list_2: \", list_2) # list_1: [1, 2, 3, 4, 5] # list_2: [2, 3, 4, 5] 刪除串列中間元素 list_1 = [1, 2, 3, 4, 5, 6, 7] del list_1[2:5] print(\"list_1: \", list_1) # list_1: [1, 2, 6, 7] 計算元素    函式 說明     len 串列長度   max 串列最大值   min 串列最小值    list_1 = [1, 2, 3, 4, 5, 6, 7] # 數量 list_1_length = len(list_1) # 最小值 list_1_min = min(list_1) # 最大值 list_1_max = max(list_1) print(\"list_1: \", list_1) print(\"list_1_length: \", list_1_length) print(\"list_1_min: \", list_1_min) print(\"list_1_max: \", list_1_max) # list_1: [1, 2, 3, 4, 5, 6, 7] # list_1_length: 7 # list_1_min: 1 # list_1_max: 7    函式 說明     list.index 元素第一次出現位置   list.count 元素出現數量    list_1 = [1, 2, 3, 4, 5, 1, 2, 3, 2, 3] # 元素 3 第一次出現位置 list_1_element3_first_index = list_1.index(3) # 元素 3 出現次數 list_1_element3_nums = list_1.count(3) print(\"list_1: \", list_1) print(\"list_1_element3_first_index: \", list_1_element3_first_index) print(\"list_1_element3_nums: \", list_1_element3_nums) # list_1: [1, 2, 3, 4, 5, 1, 2, 3, 2, 3] # list_1_element3_first_index: 2 # list_1_element3_nums: 3 加入元素 list.append() 將元素加在最後方 list_1 = [1, 2, 3, 4, 5] # 將元素加在最後方 list_1.append(55) print(\"list_1: \", list_1) # list_1: [1, 2, 3, 4, 5, 55] list.extend() 將其他串列加在最後方 list_1 = [1, 2, 3, 4, 5] # 將其他串列加在最後方 list_1.extend([55, 66]) print(\"list_1: \", list_1) # list_1: [1, 2, 3, 4, 5, 55, 66] list.insert() 將元素加在指定位置 list_1 = [1, 2, 3, 4, 5] # 將元素加在指定位置 list_1.insert(3, 55) print(\"list_1: \", list_1) # list_1: [1, 2, 3, 55, 4, 5] list_1 = [1, 2, 3, 4, 5] # 將元素加在指定位置 list_1.insert(3, [55, 66]) print(\"list_1: \", list_1) list_1: [1, 2, 3, [55, 66], 4, 5] # list_1: [1, 2, 3, [55, 66], 4, 5] list.pop() 取出最後一個元素 list_1 = [1, 2, 3, 4, 5] # 取出最後一個元素 last_element = list_1.pop() print(\"list_1: \", list_1) print(\"last_element: \", last_element) # list_1: [1, 2, 3, 4] # last_element: 5 list.pop() 取出並移除指定元素 list_1 = [1, 2, 3, 4, 5] # 取出第一個元素 last_element = list_1.pop(0) print(\"list_1: \", list_1) print(\"last_element: \", last_element) # list_1: [2, 3, 4, 5] # last_element: 1 list_1 = [1, 2, 3, 4, 5] # 取出第一個元素 last_element = list_1.pop(1) print(\"list_1: \", list_1) print(\"last_element: \", last_element) # list_1: [1, 3, 4, 5] # last_element: 2 list.remove() 移除第一次出現的元素 list_1 = [1, 2, 3, 4, 5, 2, 3] print(\"list_1: \", list_1) # 移除第一次出現的元素「3」 list_1.remove(3) print(\"list_1: \", list_1) # list_1: [1, 2, 3, 4, 5, 2, 3] # list_1: [1, 2, 4, 5, 2, 3] list.reverse() 反轉串列 list_1 = [1, 2, 3, 4, 5] # 反轉串列 list_1.reverse() print(\"list_1: \", list_1) # list_1: [5, 4, 3, 2, 1] list.sort() 排序串列 從小到大 list_1 = [7, 6, 1, 4, 3, 2, 5] # 排序串列 list_1.sort() print(\"list_1: \", list_1) # list_1: [1, 2, 3, 4, 5, 6, 7] 從大到小 list_1 = [7, 6, 1, 4, 3, 2, 5] # 元素排序 list_1.sort(reverse=1) print(\"list_1: \", list_1) # list_1: [7, 6, 5, 4, 3, 2, 1] enumerate() 列舉串列 for in list 要讓 list 能夠 for in 需要先 enumerate list 才可以 for in\nlist_1 = [1, 2, 3] print(\"list_1: \", list_1) enumerate_list_1 = enumerate(list_1) print(\"enumerate_list_1: \", enumerate_list_1) for key, value in enumerate_list_1: print('key: ', key) print('value: ', value) # list_1: [1, 2, 3] # enumerate_list_1: \u003cenumerate object at 0x10634b980\u003e # key: 0 # value: 1 # key: 1 # value: 2 # key: 2 # value: 3 參考資料  python - How to remove the first Item from a list? - Stack Overflow [Day04]Python 基礎語法 - list、tuple、dict、for、while - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天 Python enumerate() 函数 | 菜鸟教程  ","categories":["Python","教學文件","新手教學","基礎","list 串列變數"],"description":"Python 基礎: list 串列變數","excerpt":"Python 基礎: list 串列變數","ref":"/basic/data-type/list/","tags":["Python","教學文件","新手教學","基礎","list 串列變數"],"title":"list 串列變數"},{"body":"與 list 串列 功能一樣，但資料不能被修改\nList 串列與 Tuple 元組差異    差異 List 串列 Tuple 元組     內容 內容可改變，新增與刪除 內容不可異動   執行速度 較慢 較快   安全 較低 較高，因為資料不會被異動    一般 tuple 元組 tuple_1 = (1, 2, 3, 4, 5) print(\"tuple_1: \", tuple_1) print(\"tuple_1[3]: \", tuple_1[3]) # tuple_1: (1, 2, 3, 4, 5) # tuple_1[3]: 4 tuple_1 = (1, \"KJ\", True) print(\"tuple_1: \", tuple_1) # tuple_1: (1, 'KJ', True) 重複 tuple 元組 tuple_1 = (1, 2, 3) tuple_2 = tuple_1 * 2 print(\"tuple_1: \", tuple_1) print(\"tuple_2: \", tuple_2) # tuple_1: (1, 2, 3) # tuple_2: (1, 2, 3, 1, 2, 3) 取得 tuple 元組中間元素 tuple_1 = (1, 2, 3, 4, 5, 6, 7) tuple_2 = tuple_1[2:5] print(\"tuple_1: \", tuple_1) print(\"tuple_2: \", tuple_2) # tuple_1: (1, 2, 3, 4, 5, 6, 7) # tuple_2: (3, 4, 5) 錯誤案例 無法修改  TypeError: ‘tuple’ object does not support item assignment\n tuple_1 = (1, 2, 3, 4, 5, 6, 7) tuple_1[3] = 33 # TypeError: 'tuple' object does not support item assignment 無法刪除  TypeError: ‘tuple’ object does not support item deletion\n tuple_1 = (1, 2, 3, 4, 5, 6, 7) del tuple_1[2:5] # TypeError: 'tuple' object does not support item deletion 參考資料  Python Tuples Day08-串列List與元組Tuple - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天  ","categories":["Python","教學文件","新手教學","基礎","tuple 元組變數"],"description":"Python 基礎: tuple 元組變數","excerpt":"Python 基礎: tuple 元組變數","ref":"/basic/data-type/tuple/","tags":["Python","教學文件","新手教學","基礎","tuple 元組變數"],"title":"tuple 元組變數"},{"body":"","categories":["Python","教學文件","新手教學","基礎","條件","Condition"],"description":"Python 基礎: Condition 條件","excerpt":"Python 基礎: Condition 條件","ref":"/basic/condition/","tags":["Python","教學文件","新手教學","基礎","條件","Condition"],"title":"條件"},{"body":"null null 變數在 python 是使用 None 當作常數變數\nis_null_value = None if is_null_value is None: print('1. is null') else: print('2. not null') # 1. is null sys.maxsize 無限大 import sys print(sys.maxsize) # 9223372036854775807 print(type(sys.maxsize)) # \u003cclass 'int'\u003e -sys.maxsize 無限小 import sys print(-sys.maxsize) # -9223372036854775807 ","categories":["Python","教學文件","新手教學","基礎","系統變數"],"description":"Python 基礎: 系統變數","excerpt":"Python 基礎: 系統變數","ref":"/basic/data-type/system/","tags":["Python","教學文件","新手教學","基礎","系統變數"],"title":"系統變數"},{"body":"","categories":["Python","教學文件","新手教學","基礎","迴圈"],"description":"Python 基礎: 迴圈","excerpt":"Python 基礎: 迴圈","ref":"/basic/loop/","tags":["Python","教學文件","新手教學","基礎","迴圈"],"title":"迴圈"},{"body":"class Car: def Drive(self): print('Drive Car') Car1 = Car() print('Car1', Car1) print('type Car1', type(Car1)) print('Car1 is instance Car:', isinstance(Car1, Car)) Car1.Drive() # Car1 \u003c__main__.Car object at 0x1064b0940\u003e # type Car1 \u003cclass '__main__.Car'\u003e # Car1 is instance Car: True # Drive Car 參考資料  [Python物件導向]淺談Python類別(Class)  ","categories":["Python","教學文件","新手教學","基礎","類別 Class"],"description":"Python 基礎: 類別 Class","excerpt":"Python 基礎: 類別 Class","ref":"/basic/class/","tags":["Python","教學文件","新手教學","基礎","類別 Class"],"title":"類別 Class"},{"body":"一般列印 print('KJ') print('KJ') print('KJ') # KJ # KJ # KJ 列印不換行 print('KJ', end='') print('KJ', end='') print('KJ', end='') # KJKJKJ 列印字尾加入符號 print('KJ', end=', ') print('KJ', end=', ') print('KJ', end=', ') # KJ, KJ, KJ, ","categories":["Python","教學文件","新手教學","基礎","列印"],"description":"Python 基礎: 列印","excerpt":"Python 基礎: 列印","ref":"/basic/print/","tags":["Python","教學文件","新手教學","基礎","列印"],"title":"列印"},{"body":"replace 取代字串 text = \"Hello {name}\" print(text.replace('{name}', 'KJ')) # Hello KJ format 格式化字串 字串取代 text = \"Hello {name}, this {price:.2f} dollars is for you!\" print(text.format(name='KJ', price = 49)) # Hello KJ, this 49.00 dollars is for you! 轉換 16 進制 text = \"Hello {name}, this {price:x} dollars is for you!\" print(text.format(name='KJ', price = 49)) # Hello KJ, this 31 dollars is for you! translate 翻譯字串 # 翻譯來源 translate_source = \"aeiou\" # 翻譯目標 translate_target = \"AEIOU\" # 翻譯表 translate_mapping = str.maketrans(translate_source, translate_target) # 翻譯字串 text = \"this is string example....wow!!!\" print(text.translate(translate_mapping)) # thIs Is strIng ExAmplE....wOw!!! 參考資料  Python Remove Character from String - JournalDev 如何使用 Python 進行字串格式化 Python3 translate()方法 | 菜鸟教程  ","categories":["Python","教學文件","新手教學","基礎","字串 string"],"description":"Python 基礎: 字串 string","excerpt":"Python 基礎: 字串 string","ref":"/basic/string/","tags":["Python","教學文件","新手教學","基礎","字串 string"],"title":"字串 string"},{"body":"一般交換變數 使用 temp 變數儲存暫存變數\n# Python program to swap two variables x = 5 y = 10 # create a temporary variable and swap the values temp = x x = y y = temp print('The value of x after swapping: {}'.format(x)) print('The value of y after swapping: {}'.format(y)) 條件式交換變數 使用 變數X,變數Y = 變數Y,變數X 就可以直接交換變數了\nx = 5 y = 10 x, y = y, x print(\"x =\", x) print(\"y =\", y) 參考資料  Python Program to Swap Two Variables 6. Expressions — Python 3.10.3 documentation syntax - Is there a standardized method to swap two variables in Python? - Stack Overflow  ","categories":["Python","教學文件","新手教學","基礎","dict 字典變數","key-value 變數"],"description":"Python 基礎: 交換變數","excerpt":"Python 基礎: 交換變數","ref":"/basic/data-type/swap-variable/","tags":["Python","教學文件","新手教學","基礎","dict 字典變數","key-value 變數"],"title":"交換變數"},{"body":"","categories":["Python","教學文件","新手教學","Leetcode","問題"],"description":"Python Leetcode 問題","excerpt":"Python Leetcode 問題","ref":"/leetcode/question/","tags":["Python","教學文件","新手教學","Leetcode","問題"],"title":"問題"},{"body":"","categories":["Python","教學文件","新手教學","基礎","函數"],"description":"Python 基礎: 函數","excerpt":"Python 基礎: 函數","ref":"/basic/function/","tags":["Python","教學文件","新手教學","基礎","函數"],"title":"函數"},{"body":"try except 例外處理執行順序    順序 例外處理 說明     1 try 嘗試執行 try 中的 code   2 except 例外類別處理   3 else 沒有發生例外執行的程式   4 finally try 跑完後一定會執行的程式    取得 Exception 例外 try: raise Exception('custom error', 333) except Exception as e: print('1. Exception: ', e) print('1. Exception argument: ', e.args) else: print('2. else process') finally: print('3. finally process') # 1. Exception: ('custom error', 333) # 1. Exception argument: ('custom error', 333) # 3. finally process try 執行正常沒有丟出例外 try: print('0. process code') except Exception as e: print('1. Exception: ', e) print('1. Exception argument: ', e.args) else: print('2. else process') finally: print('3. finally process') # 0. process code # 2. else process # 3. finally process 自定義 Exception class CustomException(Exception): \"\"\"Raised when the input value is too small\"\"\" pass try: raise CustomException('custom error', 333) except CustomException as e: print('1.1 CustomException: ', e) print('1.1 CustomException argument: ', e.args) except Exception as e: print('1. Exception: ', e) print('1. Exception argument: ', e.args) else: print('2. else process') finally: print('3. finally process') # 1.1 CustomException: ('custom error', 333) # 1.1 CustomException argument: ('custom error', 333) # 3. finally process 參考資料  Python Exceptions: An Introduction – Real Python How to Define Custom Exceptions in Python? (With Examples)  ","categories":["Python","教學文件","新手教學","基礎","Exception 例外處理"],"description":"Python 基礎: Exception 例外處理","excerpt":"Python 基礎: Exception 例外處理","ref":"/basic/exception/","tags":["Python","教學文件","新手教學","基礎","Exception 例外處理"],"title":"Exception 例外處理"},{"body":"exit() 中斷程式 print('1. run process') print('2. run process') print('3. run process') print('4. run process') print('5. run process') exit() print('6. run process') # 1. run process # 2. run process # 3. run process # 4. run process # 5. run process ","categories":["Python","教學文件","新手教學","基礎","系統"],"description":"Python 基礎: 系統","excerpt":"Python 基礎: 系統","ref":"/basic/system/","tags":["Python","教學文件","新手教學","基礎","系統"],"title":"系統"},{"body":"type 變數類型 \u003cclass ‘list’\u003e 串列 list_1 = [1, 2, 3, 4, 5] print('list_1 type: ', type(list_1)) # list_1 type: \u003cclass 'list'\u003e \u003cclass ‘dict’\u003e 字典 user_dict = { \"name\": \"KJ\", \"home\": \"Taiwan\", \"job\": \"Developer\" } print('user_dict type: ', type(user_dict)) # user_dict type: \u003cclass 'dict'\u003e ","categories":["Python","教學文件","新手教學","基礎","其他"],"description":"Python 基礎: 其他","excerpt":"Python 基礎: 其他","ref":"/basic/other/","tags":["Python","教學文件","新手教學","基礎","其他"],"title":"其他"},{"body":"","categories":["Python","教學文件","新手教學","Leetcode"],"description":"Python Leetcode","excerpt":"Python Leetcode","ref":"/leetcode/","tags":["Python","教學文件","新手教學","Leetcode"],"title":"Leetcode"},{"body":"  #td-cover-block-0 { background-image: url(/hugo-background-1_hu61b1f0e14e530d3a37400d5ba2f45654_77504_960x540_fill_catmullrom_bottom_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/hugo-background-1_hu61b1f0e14e530d3a37400d5ba2f45654_77504_1920x1080_fill_catmullrom_bottom_2.png); } }  Python for newbie Python 菜雞踩雷學習筆記        記錄學習 Python 遇到各種不同的系統狀況處理紀錄\n   ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: url(/hugo-background-1_hu61b1f0e14e530d3a37400d5ba2f45654_77504_960x540_fill_catmullrom_bottom_2.png); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"Python for newbie"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/dict-%E5%AD%97%E5%85%B8%E8%AE%8A%E6%95%B8/","tags":"","title":"dict 字典變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/dict-%E5%AD%97%E5%85%B8%E8%AE%8A%E6%95%B8/","tags":"","title":"dict 字典變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/key-value-%E8%AE%8A%E6%95%B8/","tags":"","title":"key-value 變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/key-value-%E8%AE%8A%E6%95%B8/","tags":"","title":"key-value 變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/python/","tags":"","title":"Python"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/python/","tags":"","title":"Python"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%9F%BA%E7%A4%8E/","tags":"","title":"基礎"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%9F%BA%E7%A4%8E/","tags":"","title":"基礎"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E6%95%99%E5%AD%B8%E6%96%87%E4%BB%B6/","tags":"","title":"教學文件"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E6%95%99%E5%AD%B8%E6%96%87%E4%BB%B6/","tags":"","title":"教學文件"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/","tags":"","title":"新手教學"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E6%96%B0%E6%89%8B%E6%95%99%E5%AD%B8/","tags":"","title":"新手教學"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/set-%E5%87%BD%E6%95%B8/","tags":"","title":"set 函數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/set-%E5%87%BD%E6%95%B8/","tags":"","title":"set 函數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%87%BD%E6%95%B8/","tags":"","title":"函數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%87%BD%E6%95%B8/","tags":"","title":"函數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/0003-longest-substring-without-repeating-characters/","tags":"","title":"0003 - Longest Substring Without Repeating Characters"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/0003-longest-substring-without-repeating-characters/","tags":"","title":"0003 - Longest Substring Without Repeating Characters"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/leetcode/","tags":"","title":"Leetcode"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/leetcode/","tags":"","title":"Leetcode"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%95%8F%E9%A1%8C/","tags":"","title":"問題"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%95%8F%E9%A1%8C/","tags":"","title":"問題"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/0001-two-sum/","tags":"","title":"0001 - Two Sum"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/0001-two-sum/","tags":"","title":"0001 - Two Sum"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/0002-add-two-number/","tags":"","title":"0002 - Add Two Number"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/0002-add-two-number/","tags":"","title":"0002 - Add Two Number"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/exception-%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86/","tags":"","title":"Exception 例外處理"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/exception-%E4%BE%8B%E5%A4%96%E8%99%95%E7%90%86/","tags":"","title":"Exception 例外處理"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%85%B6%E4%BB%96/","tags":"","title":"其他"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%85%B6%E4%BB%96/","tags":"","title":"其他"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%AD%97%E4%B8%B2-string/","tags":"","title":"字串 string"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%AD%97%E4%B8%B2-string/","tags":"","title":"字串 string"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E7%B3%BB%E7%B5%B1/","tags":"","title":"系統"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E7%B3%BB%E7%B5%B1/","tags":"","title":"系統"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E9%A1%9E%E5%88%A5-class/","tags":"","title":"類別 Class"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E9%A1%9E%E5%88%A5-class/","tags":"","title":"類別 Class"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/0004-median-of-two-sorted-arrays/","tags":"","title":"0004 - Median of Two Sorted Arrays"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/0004-median-of-two-sorted-arrays/","tags":"","title":"0004 - Median of Two Sorted Arrays"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/0005-longest-palindromic-substring/","tags":"","title":"0005 - Longest Palindromic Substring"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/0005-longest-palindromic-substring/","tags":"","title":"0005 - Longest Palindromic Substring"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/condition/","tags":"","title":"Condition"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/condition/","tags":"","title":"Condition"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/for-%E8%BF%B4%E5%9C%88/","tags":"","title":"for 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/for-%E8%BF%B4%E5%9C%88/","tags":"","title":"for 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/if/","tags":"","title":"if"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/if/","tags":"","title":"if"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/list-%E4%B8%B2%E5%88%97%E8%AE%8A%E6%95%B8/","tags":"","title":"list 串列變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/list-%E4%B8%B2%E5%88%97%E8%AE%8A%E6%95%B8/","tags":"","title":"list 串列變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/tuple-%E5%85%83%E7%B5%84%E8%AE%8A%E6%95%B8/","tags":"","title":"tuple 元組變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/tuple-%E5%85%83%E7%B5%84%E8%AE%8A%E6%95%B8/","tags":"","title":"tuple 元組變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/while-%E8%BF%B4%E5%9C%88/","tags":"","title":"while 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/while-%E8%BF%B4%E5%9C%88/","tags":"","title":"while 迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E5%88%97%E5%8D%B0/","tags":"","title":"列印"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E5%88%97%E5%8D%B0/","tags":"","title":"列印"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E6%A2%9D%E4%BB%B6/","tags":"","title":"條件"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E6%A2%9D%E4%BB%B6/","tags":"","title":"條件"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E6%A2%9D%E4%BB%B6%E5%BC%8F/","tags":"","title":"條件式"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E6%A2%9D%E4%BB%B6%E5%BC%8F/","tags":"","title":"條件式"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E7%B3%BB%E7%B5%B1%E8%AE%8A%E6%95%B8/","tags":"","title":"系統變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E7%B3%BB%E7%B5%B1%E8%AE%8A%E6%95%B8/","tags":"","title":"系統變數"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E8%AE%8A%E6%95%B8%E9%A1%9E%E5%9E%8B/","tags":"","title":"變數類型"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E8%AE%8A%E6%95%B8%E9%A1%9E%E5%9E%8B/","tags":"","title":"變數類型"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/%E8%BF%B4%E5%9C%88/","tags":"","title":"迴圈"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/%E8%BF%B4%E5%9C%88/","tags":"","title":"迴圈"}]